(self.webpackChunktao=self.webpackChunktao||[]).push([[410],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),p=o,m=d["".concat(l,".").concat(p)]||d[p]||f[p]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2861:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:7},l="sort",c={unversionedId:"unix/sort",id:"unix/sort",isDocsHomePage:!1,title:"sort",description:"Using native MacOS sort utility for sorting and dedup data.",source:"@site/docs/unix/sort.md",sourceDirName:"unix",slug:"/unix/sort",permalink:"/tao/docs/unix/sort",editUrl:"https://github.com/johntday/tao/edit/master/docs/unix/sort.md",version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"jq",permalink:"/tao/docs/unix/jq"},next:{title:"Using DocSearch with Docusaurus",permalink:"/tao/docs/docsearch/intro"}},u=[],f={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sort"},"sort"),(0,i.kt)("p",null,"Using native MacOS ",(0,i.kt)("em",{parentName:"p"},"sort")," utility for sorting and dedup data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'# alphabetical order\nsort file\n\n# remove dups\nsort -u file\n\n# file with integers\nsort -n file\n\n# file with integers - reverse order\nsort -nr file\n\n# multiple files - merge and sort\nsort file1 file2\n\n# multiple files - merge, sort, and dedup\nsort -u file1 file2\n\n# sort by 1st field delimited by comma\nsort -t"," -k1,1 file\n\n# sort by 1st field delimited by comma - remove dups\nsort -t"," -k1,1 -u file\n\n# sort by 2nd field integer\nsort -t"," -k2n,2 file\n\n# sort by 2nd field decimal (general numeric)\nsort -t"," -k2g,2 file\n\n# sort by 2nd field integer in reverse order\nsort -t"," -k2nr,2 file\n\n# sort by 1st field alpha and 2nd field numerically\nsort -t"," -k1,1 -k2n,2 file\n\n# sort by 1st field alpha - case insensitive\nsort -t"," -k1f,1 file\n\n# check if file sorted and return lines out of order\nsort -c file\n')))}d.isMDXComponent=!0}}]);