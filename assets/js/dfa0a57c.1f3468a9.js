(self.webpackChunktao=self.webpackChunktao||[]).push([[3996],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),c=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,l(l({ref:t},s),{},{components:n})):a.createElement(h,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9255:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),l=["components"],i={sidebar_position:1},u="Approach for Not Returning Null",c={unversionedId:"java/java-returning-null",id:"java/java-returning-null",isDocsHomePage:!1,title:"Approach for Not Returning Null",description:"Standard approaches for not returning null.",source:"@site/docs/java/java-returning-null.md",sourceDirName:"java",slug:"/java/java-returning-null",permalink:"/tao/docs/java/java-returning-null",editUrl:"https://github.com/johntday/tao/edit/master/docs/java/java-returning-null.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Mermaid - Class Diagrams",permalink:"/tao/docs/mermaid/mermaid-classDiagram"}},s=[{value:"Return an Empty Collection",id:"return-an-empty-collection",children:[{value:"Java 5+",id:"java-5",children:[]},{value:"Java 9",id:"java-9",children:[]}]},{value:"Return an Optional object",id:"return-an-optional-object",children:[]},{value:"Return a Null Object",id:"return-a-null-object",children:[]},{value:"Throw an Exception",id:"throw-an-exception",children:[]}],p={toc:s};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"approach-for-not-returning-null"},"Approach for Not Returning Null"),(0,o.kt)("p",null,"Standard approaches for not returning null."),(0,o.kt)("h2",{id:"return-an-empty-collection"},"Return an Empty Collection"),(0,o.kt)("p",null,"If the method returns a collection type, then we can simply substitute an empty collection."),(0,o.kt)("h3",{id:"java-5"},"Java 5+"),(0,o.kt)("p",null,"The Collections class has a static method for this purpose:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"return Collections.emptyList();\n")),(0,o.kt)("h3",{id:"java-9"},"Java 9"),(0,o.kt)("p",null,"Java 9 introduced a new factory method for this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"return List.of();\n")),(0,o.kt)("p",null,"Both of these return an immutable list so the calling code should make no attempt to modify it."),(0,o.kt)("h2",{id:"return-an-optional-object"},"Return an Optional object"),(0,o.kt)("p",null,"Java 8 introduced a class called ",(0,o.kt)("inlineCode",{parentName:"p"},"java.util.Optional"),".  An ",(0,o.kt)("inlineCode",{parentName:"p"},"Optional")," is a container that can either be empty or contain a non-null value."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,o.kt)("strong",{parentName:"p"},"IS NOT MEANT")," to take the place of returning null. It is meant to indicate a third return result. The three possible results are:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"value is non-null"),(0,o.kt)("li",{parentName:"ol"},"value is null"),(0,o.kt)("li",{parentName:"ol"},"case where null value is ambiguous.  This is where ",(0,o.kt)("inlineCode",{parentName:"li"},"Optional")," should be used")),(0,o.kt)("p",null,"Adding ",(0,o.kt)("inlineCode",{parentName:"p"},"Optional")," everywhere you return anything is an anti-pattern, and just replaces all of those null checks/guards with ",(0,o.kt)("inlineCode",{parentName:"p"},"isPresent")," checks/guards. Doesn't fix the problem, just moves it."),(0,o.kt)("h2",{id:"return-a-null-object"},"Return a Null Object"),(0,o.kt)("p",null,"The Null Object Pattern is described in the ",(0,o.kt)("a",{parentName:"p",href:"https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/"},"Gang of Four\u2019s Design Patterns book"),".",(0,o.kt)("br",{parentName:"p"}),"\n","The intent of the pattern is to identify behavior that should occur when a null is encountered and encapsulate it using a static constant."),(0,o.kt)("p",null,"Let's expand on the previous Blog class example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class Blog {\n  public static Blog NOT_FOUND = new Blog(0, "Blog Not Found", Collections.emptyList());\n  \n  private long id;\n  private String name;\n  private List<Article> articles;\n \n  public Blog (long id, String name, List<Article> articles) {\n    this.id = id;\n    this.name = name;\n    this.articles = articles;\n  }\n  \n  public long getId() {\n    return id;\n  }\n \n  public List<Article> getArticles() {\n    return articles;\n  }\n}\n')),(0,o.kt)("p",null,"On line 2, we've declared a constant to represent our null object.   It's a Blog object with some sensible values for a non-existent blog.\nAny methods that return a Blog type can now use ",(0,o.kt)("inlineCode",{parentName:"p"},"Blog.NOT_FOUND")," instead of null."),(0,o.kt)("h2",{id:"throw-an-exception"},"Throw an Exception"),(0,o.kt)("p",null,"Exceptions should be reserved for exceptional conditions.    If we always expect to find a value then throwing an exception makes sense.\nFor example, we could throw an unchecked exception if an ID passed to our method isn't found in the database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'throw new IllegalArgumentException("Invalid Blog ID");\n')),(0,o.kt)("p",null,"The decision to use an exception when there is nothing to return is highly dependent on the nature of the application."))}d.isMDXComponent=!0}}]);