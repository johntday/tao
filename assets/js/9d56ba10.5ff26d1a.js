(self.webpackChunktao=self.webpackChunktao||[]).push([[498],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(t),d=a,m=c["".concat(s,".").concat(d)]||c[d]||f[d]||i;return t?r.createElement(m,l(l({ref:n},u),{},{components:t})):r.createElement(m,l({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8966:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),l=["components"],o={sidebar_position:5},s="Perl One-Liners",p={unversionedId:"unix/perl-one-liners",id:"unix/perl-one-liners",isDocsHomePage:!1,title:"Perl One-Liners",description:"Useful Perl command line utilities.",source:"@site/docs/unix/perl-one-liners.md",sourceDirName:"unix",slug:"/unix/perl-one-liners",permalink:"/tao/docs/unix/perl-one-liners",editUrl:"https://github.com/johntday/tao/edit/master/docs/unix/perl-one-liners.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"sed",permalink:"/tao/docs/unix/sed"},next:{title:"jq",permalink:"/tao/docs/unix/jq"}},u=[{value:"Print Block of Text",id:"print-block-of-text",children:[{value:"Consistent Markers",id:"consistent-markers",children:[]},{value:"Not Consistent Markers",id:"not-consistent-markers",children:[]}]},{value:"Replace Text but not within Single or Double-Quotes",id:"replace-text-but-not-within-single-or-double-quotes",children:[]},{value:"Find and extract IP addresses",id:"find-and-extract-ip-addresses",children:[]},{value:"Find and Replace with Incrementing Value",id:"find-and-replace-with-incrementing-value",children:[]},{value:"Sort CSV File by Column",id:"sort-csv-file-by-column",children:[]},{value:"Process XML with xpath and xmllint",id:"process-xml-with-xpath-and-xmllint",children:[]},{value:"Process JSON",id:"process-json",children:[]}],f={toc:u};function c(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"perl-one-liners"},"Perl One-Liners"),(0,i.kt)("p",null,"Useful Perl command line utilities."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"print-block-of-text"},"Print Block of Text"),(0,i.kt)("h3",{id:"consistent-markers"},"Consistent Markers"),(0,i.kt)("p",null,"Example where format is consistent."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ cat uniform.txt\nmango\nicecream\n--start 1--\n1234\n6789\n**end 1**\nhow are you\nhave a nice day\n--start 2--\na\nb\nc\n**end 2**\npar,far,mar,tar\n")),(0,i.kt)("p",null,'Print lines between "start" and "end".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"# perl -ne 'print if /start/../end/'\n$ perl -ne '$f=1 if /start/; print if $f; $f=0 if /end/' uniform.txt\n--start 1--\n1234\n6789\n**end 1**\n--start 2--\na\nb\nc\n**end 2**\n")),(0,i.kt)("p",null,"Other examples where the format is consistent."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ perl -ne '$f=0 if /end/; print \"* $_\" if $f; $f=1 if /start/' uniform.txt\n* 1234\n* 6789\n* a\n* b\n* c\n\n$ perl -ne '$f=1 if /start/; $f=0 if /end/; print if $f' uniform.txt\n--start 1--\n1234\n6789\n--start 2--\na\nb\nc\n\n$ perl -ne 'print if $f; $f=1 if /start/; $f=0 if /end/' uniform.txt\n1234\n6789\n**end 1**\na\nb\nc\n**end 2**\n\n$ # same as: perl -ne 'print if !(/start/../end/)'\n$ perl -ne '$f=1 if /start/; print if !$f; $f=0 if /end/' uniform.txt\nmango\nicecream\nhow are you\nhave a nice day\npar,far,mar,tar\n\n$ perl -ne '$f=0 if /end/; print if !$f; $f=1 if /start/' uniform.txt\nmango\nicecream\n--start 1--\n**end 1**\nhow are you\nhave a nice day\n--start 2--\n**end 2**\npar,far,mar,tar\n\n$ perl -ne 'print if !$f; $f=1 if /start/; $f=0 if /end/' uniform.txt\nmango\nicecream\n--start 1--\nhow are you\nhave a nice day\n--start 2--\npar,far,mar,tar\n\n$ perl -ne '$f=1 if /start/; $f=0 if /end/; print if !$f' uniform.txt\nmango\nicecream\n**end 1**\nhow are you\nhave a nice day\n**end 2**\npar,far,mar,tar\n\n$ perl -ne '$f=1 if /start/; print if $f; exit if /end/' uniform.txt\n--start 1--\n1234\n6789\n**end 1**\n\n$ perl -ne 'exit if /end/; print if $f; $f=1 if /start/' uniform.txt\n1234\n6789\n\n$ # reverse input linewise, change the order of comparison, reverse again\n$ # can't be used if record separator has to be something other than newline\n$ tac uniform.txt | perl -ne '$f=1 if /end/; print if $f; exit if /start/' | tac\n--start 2--\na\nb\nc\n**end 2**\n\n$ # or, save the blocks in a buffer and print the last one alone\n$ perl -ne 'if(/start/){$f=1; $buf=$_; next}\n            $buf .= $_ if $f;\n            $f=0 if /end/;\n            END{print $buf}' uniform.txt\n--start 2--\na\nb\nc\n**end 2**\n\n$ seq 30 | perl -ne 'BEGIN{$n=2; $c=0} $c++ if /4/; if($c==$n){print; exit if /6/}'\n14\n15\n16\n\n$ seq 30 | perl -ne 'BEGIN{$n=1; $c=0} if(/4/){$f=1; $c++}\n                     print if $f && $c>$n; $f=0 if /6/'\n14\n15\n16\n24\n25\n26\n\n$ seq 30 | perl -ne 'BEGIN{$n=2; $c=0} if(/4/){$f=1; $c++}\n                     print if $f && $c!=$n; $f=0 if /6/'\n4\n5\n6\n24\n25\n26\n\n$ # additional condition here is '15' as one of the lines in the block\n$ seq 30 | perl -ne 'if(/4/){$f=1; $buf=$_; next}\n                     $buf .= $_ if $f;\n                     if(/6/){$f=0; print $buf if $buf=~/^15$/m}'\n14\n15\n16\n")),(0,i.kt)("h3",{id:"not-consistent-markers"},"Not Consistent Markers"),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"buffer")," when format is not consistent."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ cat broken.txt\nqqqqqqqqqqqqqqqq\nerror 1\nhi\nerror 2\n1234\n6789\nstate 1\nbye\nstate 2\nerror 3\nxyz\nerror 4\nabcd\nstate 3\nzzzzzzzzzzzzzzzz\n\n$ perl -ne 'if(/error/){$f=1; $buf=$_; next}\n            $buf .= $_ if $f;\n            if(/state/){print $buf if $f; $f=0}' broken.txt\nerror 2\n1234\n6789\nstate 1\nerror 4\nabcd\nstate 3\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"replace-text-but-not-within-single-or-double-quotes"},"Replace Text but not within Single or Double-Quotes"),(0,i.kt)("p",null,"This example will replace ",(0,i.kt)("inlineCode",{parentName:"p"},";")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"#"),", but not within single or double-quotes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"perl -pe 's/(?:\\x27;\\x27|\";\")(*SKIP)(*F)|;/#/g'\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"find-and-extract-ip-addresses"},"Find and extract IP addresses"),(0,i.kt)("p",null,"Extract only IPv4 addresses"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"perl -MRegexp::Common=net -nE 'say $& while /$RE{net}{IPv4}/g'\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"find-and-replace-with-incrementing-value"},"Find and Replace with Incrementing Value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"echo 'a | a | a | a | a | a | a | a' | perl -pe 's/ *\\| */$i++/ge'\n\na0a1a2a3a4a5a6a\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"}," *\\| *")," match ",(0,i.kt)("inlineCode",{parentName:"li"},"|")," surrounded by zero-or-more spaces"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"e")," modifier to have Perl do in-replacement"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$i++")," will increment value - starting at zero")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"sort-csv-file-by-column"},"Sort CSV File by Column"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ perl -F, -lane 'print join \",\", $.==1 ? @F : ($F[0], sort @F[1..$#F])' ip.txt\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-F,")," will use ",(0,i.kt)("inlineCode",{parentName:"li"},",")," as input field separator, results saved in ",(0,i.kt)("inlineCode",{parentName:"li"},"@F")," array",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"See ",(0,i.kt)("a",{parentName:"li",href:"https://perldoc.perl.org/perlrun#Command-Switches"},"https://perldoc.perl.org/perlrun#Command-Switches")," for details on other options"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'join ","')," will use ",(0,i.kt)("inlineCode",{parentName:"li"},",")," as output field separator"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$.==1 ? @F")," print first line as-is"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"($F[0], sort @F[1..$#F])")," for other lines, get first field and sorted output of other fields",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"..")," is range operator, ",(0,i.kt)("inlineCode",{parentName:"li"},"$#F")," will give index of last field"),(0,i.kt)("li",{parentName:"ul"},"Optional: you can use ",(0,i.kt)("inlineCode",{parentName:"li"},"(shift @F, sort @F)")," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"($F[0], sort @F[1..$#F])"))))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"process-xml-with-xpath-and-xmllint"},"Process XML with xpath and xmllint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<doc>\n    <greeting type="ask">Hi there. How are you?</greeting>\n    <greeting type="reply">I am good.</greeting>\n    <color>\n        <blue>flower</blue>\n        <blue>sand stone</blue>\n        <light-blue>sky</light-blue>\n        <light-blue>water</light-blue>\n    </color>\n</doc>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ xpath -e '//blue/text()' sample.xml\nFound 2 nodes in sample.xml:\n-- NODE --\nflower\n-- NODE --\nsand stone\n\n$ xpath -q -e '//blue/text()' sample.xml\nflower\nsand stone\n\n$ xmllint --xpath '//blue/text()' sample.xml\nflower\nsand stone\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"process-json"},"Process JSON"),(0,i.kt)("p",null,"Using ",(0,i.kt)("a",{parentName:"p",href:"https://metacpan.org/pod/Cpanel::JSON::XS"},"Cpanel::JSON::XS"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'$ s=\'{"greeting":"hi","marks":[78,62,93],"fruit":"apple"}\'\n\n$ echo "$s" | cpanel_json_xs\n{\n   "fruit" : "apple",\n   "greeting" : "hi",\n   "marks" : [\n      78,\n      62,\n      93\n   ]\n}\n\n$ pj() { perl -MCpanel::JSON::XS -0777 -E \'$ip=decode_json <>;\'"$@" ; }\n\n$ echo "$s" | pj \'say $ip->{fruit}\'\napple\n\n$ echo "$s" | pj \'say join ":", @{$ip->{marks}}\'\n78:62:93\n')),(0,i.kt)("p",null,"Compared with using ",(0,i.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq/"},"jq")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'$ echo "$s" | jq \'.fruit\'\n"apple"\n\n$ echo "$s" | jq \'.marks | join(":")\'\n"78:62:93"\n')))}c.isMDXComponent=!0}}]);